<?xml version="1.0" encoding="UTF-8"?>
<pmd version="4.2.1" timestamp="Sun Jun 13 23:28:47 CST 2010">
   <file name="D:/开发目录/neatunit/src/neatunit/Assert.as">
      <violation beginline="13" endline="13" begincolumn="41" endcolumn="41" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="13" endline="13" begincolumn="58" endcolumn="58" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="20" endline="20" begincolumn="44" endcolumn="44" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="20" endline="20" begincolumn="61" endcolumn="61" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="27" endline="27" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="33" endline="33" begincolumn="41" endcolumn="41" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="39" endline="39" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="39" endline="39" begincolumn="55" endcolumn="55" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="46" endline="46" begincolumn="43" endcolumn="43" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="46" endline="46" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="52" endline="52" begincolumn="43" endcolumn="43" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="58" endline="58" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="64" endline="64" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="64" endline="64" begincolumn="57" endcolumn="57" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="12" endline="12" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="12" endline="12" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 11 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="13" endline="13" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertEqual) should be private. </violation>
      <violation beginline="20" endline="20" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertNotEqual) should be private. </violation>
      <violation beginline="27" endline="27" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertTrue) should be private. </violation>
      <violation beginline="33" endline="33" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertFalse) should be private. </violation>
      <violation beginline="39" endline="39" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertSame) should be private. </violation>
      <violation beginline="46" endline="46" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertNotSame) should be private. </violation>
      <violation beginline="52" endline="52" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertNotNull) should be private. </violation>
      <violation beginline="58" endline="58" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertNull) should be private. </violation>
      <violation beginline="64" endline="64" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertEqualsFloat) should be private. </violation>
      <violation beginline="71" endline="71" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.ProtectedStaticMethod" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">This method (assertThrows) should be private. </violation>
      <violation beginline="188" endline="188" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="All Flex Rules" package="neatunit" class="Assert.as" externalInfoUrl="" priority="3">Nested if statements are not a good design. </violation>
   </file>
   <file name="D:/开发目录/neatunit/src/neatunit/CollectionAssert.as">
      <violation beginline="56" endline="56" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="CollectionAssert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="65" endline="65" begincolumn="59" endcolumn="59" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="neatunit" class="CollectionAssert.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="29" endline="29" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="neatunit" class="CollectionAssert.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="29" endline="29" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="All Flex Rules" package="neatunit" class="CollectionAssert.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 12 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="29" endline="29" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="All Flex Rules" package="neatunit" class="CollectionAssert.as" externalInfoUrl="" priority="3">Too many public fields or functions detected (10 maximum, but 11 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="49" endline="49" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="All Flex Rules" package="neatunit" class="CollectionAssert.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'. </violation>
      <violation beginline="179" endline="179" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="neatunit" class="CollectionAssert.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
   </file>
   <file name="D:/开发目录/neatunit/src/neatunit/StringAssert.as">
      <violation beginline="28" endline="28" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="neatunit" class="StringAssert.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
   </file>
   <file name="D:/开发目录/neatunit/src/neatunit/TestResult.as">
      <violation beginline="12" endline="12" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="neatunit" class="TestResult.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="12" endline="12" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="neatunit" class="TestResult.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 17 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
   </file>
   <file name="D:/开发目录/neatunit/src/neatunit/TestRunner.as">
      <violation beginline="19" endline="19" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="neatunit" class="TestRunner.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="19" endline="19" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="All Flex Rules" package="neatunit" class="TestRunner.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 14 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="19" endline="19" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="neatunit" class="TestRunner.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 16 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="59" endline="59" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="neatunit" class="TestRunner.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 40 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
   </file>
   <file name="D:/开发目录/neatunit/src/neatunit/TestSuite.as">
      <violation beginline="18" endline="18" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="All Flex Rules" package="neatunit" class="TestSuite.as" externalInfoUrl="" priority="1">This parameter (testData) of this function is not used. </violation>
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="neatunit" class="TestSuite.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
   </file>
</pmd>
